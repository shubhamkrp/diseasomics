# -*- coding: utf-8 -*-
"""adding the nodes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mfx3DBevc1JhPNuqajqesmFMRsj7wwce
"""

import pandas as pd
!pip install pronto

import pronto
ontology1 = pronto.Ontology('/content/symp.obo')
ontology2 = pronto.Ontology('/content/doid.obo')

import string

#adding nodes for symp (WITH DEFINITION)
other={}
for term in ontology1.terms():
  if not term.obsolete:
    if term.definition is not None:
      term_def=term.definition.replace("'","\\'")
    else: term_def="None"
    xref_list=[]
    for xref1 in term.xrefs:
      xref=str(xref1)
      xref=xref.replace('Xref','')
      xref=xref.replace("(","").replace(")","")
      #xref=xref.replace("'",'"')
      xref_list.append(f'"{xref}"')
    if not term.xrefs: xref_list=['"None"']
    if term.synonyms:
      l=[]
      for synonym in term.synonyms:
        x=synonym.description
        if "'" not in x:
          l.append(x)
        else: x=x.replace("'","\\'");l.append(x);other[term.id]=x
      print("(:Symptom { name: '",term.name,"', id: '",term.id,"', synonyms: '",", ".join(l),"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")
    if not term.synonyms:
      print("(:Symptom { name: '",term.name,"', id: '",term.id,"',definition: '",term_def, "', xrefs: [", ', '.join(xref_list), "] }),",sep="")

#for diseases
other2={}
otherINname={}
i=0

for term in ontology2.terms():
  if not term.obsolete:
    if i<5000:
      i+=1
      if term.definition is not None:
        term_def=term.definition.replace("'","\\'")
      else: term_def="None"
      xref_list=[]
      for xref1 in term.xrefs:
        xref=str(xref1)
        xref=xref.replace('Xref','')
        xref=xref.replace("(","").replace(")","")
        #xref.replace("'",'"')
        xref_list.append(f'"{xref}"')
      if not term.xrefs: xref_list=['"None"']

      if 1<2: #redundant line
        l=[]
        if term.synonyms:
          for synonym in term.synonyms:
            x=synonym.description
            if "'" not in x:
              l.append(x)
            if "'" in x: other2[term.id]=x; x=x.replace("'","\\'"); l.append(x)
          if "'" not in term.name:
            print("(:Disease { name: '",term.name,"', id: '",term.id,"', synonyms: '",", ".join(l),"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")
          if "'" in term.name:
            otherINname[term.id]=term.name
            name=term.name.replace("'","\\'")
            print("(:Disease { name: '",name,"', id: '",term.id,"', synonyms: '",", ".join(l),"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")

i=0
for term in ontology2.terms():
  if not term.obsolete:
    if i<5000: i+=1; pass
    else:
      if term.definition is not None:
        term_def=term.definition.replace("'","\\'")
      else: term_def="None"
      xref_list=[]
      for xref1 in term.xrefs:
        xref=str(xref1)
        xref=xref.replace('Xref','')
        xref=xref.replace("(","").replace(")","")
        #xref.replace("'",'"')
        xref_list.append(f'"{xref}"')
      if not term.xrefs: xref_list=['"None"']

      if 1<2: #redundant line
        l=[]
        if term.synonyms:
          for synonym in term.synonyms:
            x=synonym.description
            if "'" not in x:
              l.append(x)
            if "'" in x: other2[term.id]=x; x=x.replace("'","\\'"); l.append(x)
          if "'" not in term.name:
            print("(:Disease { name: '",term.name,"', id: '",term.id,"', synonyms: '",", ".join(l),"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")
          if "'" in term.name:
            otherINname[term.id]=term.name
            name=term.name.replace("'","\\'")
            print("(:Disease { name: '",name,"', id: '",term.id,"', synonyms: '",", ".join(l),"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")

for term in ontology2.terms():
    if not term.obsolete:
      if 1<2:
        if not term.synonyms:
          if term.definition is not None:
            term_def=term.definition.replace("'","\\'")
          else: term_def="None"
          xref_list=[]
          for xref1 in term.xrefs:
            xref=str(xref1)
            xref=xref.replace('Xref','')
            xref=xref.replace("(","").replace(")","")
            #xref.replace("'",'"')
            xref_list.append(f'"{xref}"')
          if not term.xrefs: xref_list=['"None"']

          if "'" in term.name:
            otherINname[term.id]=term.name
            name=term.name.replace("'","\\'")
          else:
            name=term.name
          print("(:Disease { name: '",name,"', id: '",term.id,"', definition: '",term_def, "',xrefs: [", ', '.join(xref_list), "] }),",sep="")

len(otherINname)

len(other2)

import csv

# Create a set to avoid duplicate entries
relationships = set()

for term in ontology2.terms():
  if not term.obsolete:
    for kind in term.superclasses(distance=1):  # Use superclasses method to get 'is_a' relationships
      if not kind.obsolete:
        parent_id = kind.id
        child_id = term.id
        relationships.add((parent_id, child_id))

count = 0
for x, y in relationships:
    if x == y:
        count += 1
count

len(relationships)

# Write to CSV file
with open('disease_relationships.csv', mode='w', newline='') as file:
    writer = csv.writer(file)
    writer.writerow(['parent_id', 'child_id'])
    for parent_id, child_id in relationships:
        if parent_id!=child_id: writer.writerow([parent_id, child_id])

print("CSV file 'disease_relationships.csv' created with parent-child relationships.")

import pandas as pd

# Load the CSV file
df = pd.read_csv('disease_relationships.csv')

# Check for duplicates
duplicates = df[df.duplicated()]

# Print the number of duplicate rows
print(f"Number of duplicate rows: {len(duplicates)}")

# Remove duplicates
df = df.drop_duplicates()

# Save the cleaned CSV file
df.to_csv('cleaned_disease_relationships.csv', index=False)